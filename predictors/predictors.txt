predictors (5 anos de histórico)
01 - OHLCV, n_steps = 2, n_hidden_layers = 1
02 - OHLCV, n_steps = 2, n_hidden_layers = 2
03 - OHLCV, n_steps = 2, n_hidden_layers = 3
04 - OHLCV, n_steps = 2, n_hidden_layers = 4
05 - OHLCV, n_steps = 2, n_hidden_layers = 5

06 - OHLCV, n_steps = 4, n_hidden_layers = 1
07 - OHLCV, n_steps = 4, n_hidden_layers = 2
08 - OHLCV, n_steps = 4, n_hidden_layers = 3
09 - OHLCV, n_steps = 4, n_hidden_layers = 4
10 - OHLCV, n_steps = 4, n_hidden_layers = 5

11 - OHLCV, n_steps = 8, n_hidden_layers = 1
12 - OHLCV, n_steps = 8, n_hidden_layers = 2
13 - OHLCV, n_steps = 8, n_hidden_layers = 3
14 - OHLCV, n_steps = 8, n_hidden_layers = 4
15 - OHLCV, n_steps = 8, n_hidden_layers = 5

16 - OHLC, n_steps = 2, n_hidden_layers = 1
17 - OHLC, n_steps = 2, n_hidden_layers = 2
18 - OHLC, n_steps = 2, n_hidden_layers = 3
19 - OHLC, n_steps = 2, n_hidden_layers = 4
20 - OHLC, n_steps = 2, n_hidden_layers = 5

21 - OHLC, n_steps = 4, n_hidden_layers = 1
22 - OHLC, n_steps = 4, n_hidden_layers = 2
23 - OHLC, n_steps = 4, n_hidden_layers = 3
24 - OHLC, n_steps = 4, n_hidden_layers = 4
25 - OHLC, n_steps = 4, n_hidden_layers = 5

26 - OHLC, n_steps = 8, n_hidden_layers = 1
27 - OHLC, n_steps = 8, n_hidden_layers = 2
28 - OHLC, n_steps = 8, n_hidden_layers = 3
29 - OHLC, n_steps = 8, n_hidden_layers = 4
30 - OHLC, n_steps = 8, n_hidden_layers = 5

    n_steps = 8
    n_samples_train = 370000  # Número de amostras usadas na fase de treinamento e validação
    validation_split = 0.2
    n_samples_test = 3000  # Número de amostras usadas na fase de avaliação. São amostras inéditas.
    # horizontally stack columns
    dataset_train = prepare_train_data2(hist, symbol_out, 0, n_samples_train, candle_input_type, candle_output_type)

    n_features = X_train.shape[2]
    n_inputs = n_steps * n_features
    max_n_epochs = n_inputs * 3 * 0 + 100
    patience = int(max_n_epochs / 10) * 0 + 3
    n_symbols = len(hist.symbols)

    model = Sequential()
    n_filters = n_features
    kernel_size = n_steps
    pool_size = n_inputs
    n_neurons = n_inputs

    # define cnn model
    # input layer
    model.add(Conv1D(filters=n_filters, kernel_size=kernel_size, activation='relu', input_shape=(n_steps, n_features)))
    model.add(MaxPooling1D(pool_size=pool_size, padding='same'))
    model.add(Flatten())

    # hidden layers
    model.add(Dense(n_neurons, activation='relu'))

    # output layer
    model.add(Dense(len(candle_output_type)))
    model.compile(optimizer='adam', loss='mse')
    model_config = model.get_config()
